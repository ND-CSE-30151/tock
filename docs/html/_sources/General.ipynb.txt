{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tock import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = FiniteAutomaton()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.set_start_state(\"q1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m.add_transition(\"q1,0 -> q1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The transition is specified using a string, but a lot of other forms are allowed as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m.add_transition(\"q1,0\", \"q1\")\n",
    "m.add_transition([\"q1\",\"0\"], [\"q1\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To add a bunch of transitions at once:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m.add_transitions([\"q1,1 -> q1\",\n",
    "                   \"q1,1 -> q2\",\n",
    "                   \"q2,& -> q3\",\n",
    "                   \"q2,0 -> q3\",\n",
    "                   \"q3,1 -> q4\",\n",
    "                   \"q4,0 -> q4\",\n",
    "                   \"q4,1 -> q4\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m.add_accept_state(\"q4\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"105pt\" viewBox=\"0.00 0.00 320.00 105.00\" width=\"320pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 101)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-101 316,-101 316,4 -4,4\" stroke=\"none\"/>\n",
       "<!-- 0 -->\n",
       "<g class=\"node\" id=\"node1\"><title>0</title>\n",
       "<path d=\"M71.8333,-21C71.8333,-21 62.1667,-21 62.1667,-21 59.3333,-21 56.5,-18.1667 56.5,-15.3333 56.5,-15.3333 56.5,-9.66667 56.5,-9.66667 56.5,-6.83333 59.3333,-4 62.1667,-4 62.1667,-4 71.8333,-4 71.8333,-4 74.6667,-4 77.5,-6.83333 77.5,-9.66667 77.5,-9.66667 77.5,-15.3333 77.5,-15.3333 77.5,-18.1667 74.6667,-21 71.8333,-21\" fill=\"none\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"10.00\" text-anchor=\"middle\" x=\"67\" y=\"-10\">q1</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;0 -->\n",
       "<g class=\"edge\" id=\"edge2\"><title>0-&gt;0</title>\n",
       "<path d=\"M60.1459,-21.1857C56.3598,-29.6739 58.6445,-39 67,-39 73.7888,-39 76.57,-32.8433 75.3435,-25.9817\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"73.8541,-21.1857 77.4858,-25.2934 74.5956,-23.5732 75.337,-25.9607 75.337,-25.9607 75.337,-25.9607 74.5956,-23.5732 73.1883,-26.628 73.8541,-21.1857 73.8541,-21.1857\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"64\" y=\"-86.8\">0</text>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"64\" y=\"-72.8\">0</text>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"64\" y=\"-58.8\">0</text>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"64\" y=\"-44.8\">1</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g class=\"node\" id=\"node2\"><title>1</title>\n",
       "<path d=\"M159.333,-21C159.333,-21 149.667,-21 149.667,-21 146.833,-21 144,-18.1667 144,-15.3333 144,-15.3333 144,-9.66667 144,-9.66667 144,-6.83333 146.833,-4 149.667,-4 149.667,-4 159.333,-4 159.333,-4 162.167,-4 165,-6.83333 165,-9.66667 165,-9.66667 165,-15.3333 165,-15.3333 165,-18.1667 162.167,-21 159.333,-21\" fill=\"none\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"10.00\" text-anchor=\"middle\" x=\"154.5\" y=\"-10\">q2</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g class=\"edge\" id=\"edge3\"><title>0-&gt;1</title>\n",
       "<path d=\"M77.8079,-12.5C92.7544,-12.5 121.332,-12.5 138.777,-12.5\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"143.806,-12.5 138.806,-14.7501 141.306,-12.5 138.806,-12.5001 138.806,-12.5001 138.806,-12.5001 141.306,-12.5 138.806,-10.2501 143.806,-12.5 143.806,-12.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"117\" y=\"-18.3\">1</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g class=\"node\" id=\"node3\"><title>2</title>\n",
       "<path d=\"M228.333,-21C228.333,-21 218.667,-21 218.667,-21 215.833,-21 213,-18.1667 213,-15.3333 213,-15.3333 213,-9.66667 213,-9.66667 213,-6.83333 215.833,-4 218.667,-4 218.667,-4 228.333,-4 228.333,-4 231.167,-4 234,-6.83333 234,-9.66667 234,-9.66667 234,-15.3333 234,-15.3333 234,-18.1667 231.167,-21 228.333,-21\" fill=\"none\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"10.00\" text-anchor=\"middle\" x=\"223.5\" y=\"-10\">q3</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;2 -->\n",
       "<g class=\"edge\" id=\"edge5\"><title>1-&gt;2</title>\n",
       "<path d=\"M165.099,-12.5C176.244,-12.5 194.752,-12.5 207.732,-12.5\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"212.918,-12.5 207.918,-14.7501 210.418,-12.5 207.918,-12.5001 207.918,-12.5001 207.918,-12.5001 210.418,-12.5 207.918,-10.2501 212.918,-12.5 212.918,-12.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"186.5\" y=\"-32.3\">Îµ</text>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"186\" y=\"-18.3\">0</text>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g class=\"node\" id=\"node4\"><title>3</title>\n",
       "<path d=\"M301.833,-21C301.833,-21 292.167,-21 292.167,-21 289.333,-21 286.5,-18.1667 286.5,-15.3333 286.5,-15.3333 286.5,-9.66667 286.5,-9.66667 286.5,-6.83333 289.333,-4 292.167,-4 292.167,-4 301.833,-4 301.833,-4 304.667,-4 307.5,-6.83333 307.5,-9.66667 307.5,-9.66667 307.5,-15.3333 307.5,-15.3333 307.5,-18.1667 304.667,-21 301.833,-21\" fill=\"none\" stroke=\"black\"/>\n",
       "<path d=\"M303.167,-25C303.167,-25 290.833,-25 290.833,-25 286.667,-25 282.5,-20.8333 282.5,-16.6667 282.5,-16.6667 282.5,-8.33333 282.5,-8.33333 282.5,-4.16667 286.667,-0 290.833,-0 290.833,-0 303.167,-0 303.167,-0 307.333,-0 311.5,-4.16667 311.5,-8.33333 311.5,-8.33333 311.5,-16.6667 311.5,-16.6667 311.5,-20.8333 307.333,-25 303.167,-25\" fill=\"none\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"10.00\" text-anchor=\"middle\" x=\"297\" y=\"-10\">q4</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g class=\"edge\" id=\"edge4\"><title>2-&gt;3</title>\n",
       "<path d=\"M234.143,-12.5C245.113,-12.5 263.295,-12.5 277.115,-12.5\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"282.361,-12.5 277.361,-14.7501 279.861,-12.5 277.361,-12.5001 277.361,-12.5001 277.361,-12.5001 279.861,-12.5 277.361,-10.2501 282.361,-12.5 282.361,-12.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"255\" y=\"-18.3\">1</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;3 -->\n",
       "<g class=\"edge\" id=\"edge6\"><title>3-&gt;3</title>\n",
       "<path d=\"M290.642,-25.0318C288.572,-34.0334 290.691,-43 297,-43 302.126,-43 304.486,-37.0807 304.08,-30.0327\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"303.358,-25.0318 306.3,-29.6587 303.715,-27.5061 304.073,-29.9804 304.073,-29.9804 304.073,-29.9804 303.715,-27.5061 301.846,-30.3022 303.358,-25.0318 303.358,-25.0318\" stroke=\"black\"/>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"294\" y=\"-62.8\">0</text>\n",
       "<text font-family=\"Courier,monospace\" font-size=\"9.00\" text-anchor=\"start\" x=\"294\" y=\"-48.8\">1</text>\n",
       "</g>\n",
       "<!-- START -->\n",
       "<g class=\"node\" id=\"node5\"><title>START</title>\n",
       "</g>\n",
       "<!-- START&#45;&gt;0 -->\n",
       "<g class=\"edge\" id=\"edge1\"><title>START-&gt;0</title>\n",
       "<path d=\"M1.04711,-12.5C2.39189,-12.5 32.2191,-12.5 50.981,-12.5\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"56.4047,-12.5 51.4047,-14.7501 53.9047,-12.5 51.4047,-12.5001 51.4047,-12.5001 51.4047,-12.5001 53.9047,-12.5 51.4046,-10.2501 56.4047,-12.5 56.4047,-12.5\" stroke=\"black\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can create pushdown automata and Turing machines in a similar way using `PushdownAutomaton` and `TuringMachine`. But many other kinds of automata can be created by instantiating a `Machine` directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m = Machine(5, state=0, input=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first argument is required and says how many \"stores\" the machine has, each of which can be used as a state, a stack, a tape, or whatever. So this machine has 5 stores.\n",
    "\n",
    "The argument `state=0` means that store 0 is the state. It's this store that is used to define the start and accept conditions, and this store that is used to define the nodes in a state transition diagram.\n",
    "\n",
    "The argument `input=1` is required and means that store 1 is the input. When the automaton is run, the input string will be placed on this store."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m = Machine(4, state=0, input=1, oneway=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The argument `oneway=True` means that the automaton only consumes the input; it doesn't write to the input and it doesn't ever move backward. When this flag is set, a couple of things happen.\n",
    "\n",
    "- Since the right-hand side of a transition always has an empty input, it is omitted. For example, finite automaton transitions have 2 members on the left-hand side and only 1 member on the right-hand side.\n",
    "- The input must be entirely consumed in order for the machine to accept the input string. Formally, this means that the accepting configuration has a blank symbol (`_`) for the input."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's also possible to define more complicated starting and accepting configurations. Do this using `set_accept_config` instead of `set_accept_state`, and `add_accept_config(s)` instead of `add_accept_state(s)`. For example, if the above machine is a 2-stack PDA and we want to require that both stacks are empty:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.add_accept_config(\"qf,&,_,_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, it doesn't matter whether the condition for the input is `&` or `_`; because `oneway=True`, it will be set to `_` regardless."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
